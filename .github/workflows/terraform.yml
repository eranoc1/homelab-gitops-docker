# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, linux, ARM64, homelab]
    #environment: production # Not available in GitHub free plan private repository

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set Terraform TRANSMISSION_PASSWORD environment variable
      run: echo "TF_VAR_transmission_password=\"${{ secrets.TRANSMISSION_PASSWORD }}\"" >> $GITHUB_ENV

    - name: Set Terraform TRANSMISSION_PASSWORD environment variable temp file
      run: echo "\"${{ secrets.TRANSMISSION_PASSWORD }}\"" > .transmission_password

    - name: Replace var.tpassword in variables.tf
      run: sed -i "s|var.tpassword|$(cat .transmission_password)|g" ./transmission/variables.tf 
      
    - name: Set Terraform CLOUDFLARED_TOKEN environment variable
      run: echo "TF_VAR_cloudflared_token=${{ secrets.CLOUDFLARED_TOKEN }}" >> $GITHUB_ENV

    - name: Set Terraform CLOUDFLARED_TOKEN environment variable temp file
      run: echo "\"${{ secrets.CLOUDFLARED_TOKEN }}\"" >> .cloudflared_token

    - name: Replace cloudflared var.tunnel_token in main.tf
      run: sed -i "s|var.tunnel_token|$(cat .cloudflared_token)|g" ./cloudflared/main.tf  

    - name: Remove Terraform environment variable temp file .transmission_password
      run: rm .transmission_password

    - name: Remove Terraform environment variable temp file .cloudflared_token
      run: rm .cloudflared_token
      
    # - name: Verify variable (for debugging, remove in production)
    #   run: echo "TF_VAR_transmission_password is set"      

    # Symlink to Node.js binary
    # - name: Symlink to Node.js binary
    #   run: |        
    #     if [ ! -L /usr/local/bin/node ]; then
    #       sudo ln -s $HOME/externals/node20/bin/node /usr/local/bin/node || :
    #     fi

    # When running on self-hosted GitHub Actions runners,
    # NodeJS must be previously installed with the version specified in the action.yml.
    - uses: actions/setup-node@v2
      with:
        node-version: '20'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      ##with:
      ##  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # cd to Terraform shared directory
    - name: Change to Terraform shared directory
      run: |
        #cd shared
        echo $PWD

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        #cd shared
        echo $PWD
        terraform init
    # Create a new group to allow the user to run Terraform commands with Docker provider
    # - name: Create new group and add user
    #   run: |
    #     sudo groupadd -g 998 docker
    #     sudo usermod -aG docker $(whoami)
    #     newgrp
        
    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: |
    #     #cd shared
    #     echo $PWD
    #     terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        #cd shared
        echo $PWD
        sudo /usr/bin/terraform plan -input=false | tee .tfplanout

    - name: Remove existing container/s
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        sudo docker rm -f $(cat .tfplanout | grep "+" | grep "resource" | awk '{print $5}' | cut -d '"' -f 2) || true

    # - name: Set TF_VAR_cloudflared_token
    #   env:
    #     CLOUDFLARED_TOKEN: ${{ secrets.CLOUDFLARED_TOKEN }}
    #   run: echo "TF_VAR_cloudflared_token=${{ secrets.CLOUDFLARED_TOKEN }}" >> $GITHUB_ENV

    # - name: Set TF_VAR_tunnel_token
    #   env:
    #     TUNNEL_TOKEN: ${{ secrets.TUNNEL_TOKEN }}
    #   run: echo "TF_VAR_tunnel_token=${{ secrets.TUNNEL_TOKEN }}" >> $GITHUB_ENV
        
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # env:
      #   TF_VAR_tunnel_token: ${{ secrets.TUNNEL_TOKEN }}
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        #cd shared
        #sudo /usr/bin/terraform apply -auto-approve -input=false || true
        #export TF_VAR_tunnel_token=${{ secrets.TUNNEL_TOKEN }}
        #sed -i 's|var\.tunnel_token|"'$tunnel_token'"|g' cloudflared/main.tf
        ##cp ~/cfmain.tf cloudflared/main.tf
        sudo /usr/bin/terraform apply -auto-approve -input=false
        

    # - name: Restart GitHub Actions runner
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     sudo docker restart ghrunner